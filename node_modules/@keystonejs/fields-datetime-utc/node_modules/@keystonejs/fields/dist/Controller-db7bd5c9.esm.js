import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import '@babel/runtime/helpers/esm/objectWithoutProperties';
import 'inflection';
import '@keystonejs/access-control';
import { q as queryFragment } from './index-95b06b8e.esm.js';
import 'date-fns/parse';
import 'date-fns/format';
import '@keystonejs/adapter-mongoose';
import '@keystonejs/adapter-knex';
import 'mongoose';
import 'pluralize';
import '@keystonejs/field-content/Block';
import '@keystonejs/field-content/blocks';
import 'lodash.groupby';
import 'p-settle';
import '@keystonejs/utils';
import 'apollo-errors';
import 'graphql';
import 'graphql/language';
import 'luxon';
import 'node-fetch';
import 'dumb-passwords';
import '@sindresorhus/slugify';
import 'cuid';
import 'unsplash-js';
import 'query-string';
import '@babel/runtime/helpers/esm/classCallCheck';
import 'lodash.isequal';
import '../Controller/dist/fields.esm.js';
import FileController$1 from './Controller-9b27077d.esm.js';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class FileController extends FileController$1 {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "getQueryFragment", () => "\n    ".concat(this.path, " {\n      ").concat(queryFragment, "\n    }\n  "));

    _defineProperty(this, "deserialize", data => {
      const oEmbed = data[this.path];

      if (!oEmbed || !oEmbed.originalUrl) {
        // Nothing set, so force to null
        return null;
      }

      return {
        originalUrl: oEmbed.originalUrl,
        preview: _objectSpread({
          // Ensure the .html property is always set
          html: ''
        }, oEmbed, {
          // Attempt to derive a useful title
          title: oEmbed.title || oEmbed.author && oEmbed.author.name || oEmbed.provider && oEmbed.provider.name || ''
        })
      };
    });

    _defineProperty(this, "serialize", data => {
      const {
        path
      } = this; // We only send the URL itself to the mutation

      return data[path] && data[path].originalUrl || null;
    });
  }

}

export default FileController;
