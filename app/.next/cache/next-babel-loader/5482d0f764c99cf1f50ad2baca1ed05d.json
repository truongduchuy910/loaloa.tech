{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nexport default function formatMoney(amount) {\n  var decimalCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \".\";\n  var thousands = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \",\";\n\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    var negativeSign = amount < 0 ? \"-\" : \"\";\n\n    var i = _parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n\n    var j = i.length > 3 ? i.length % 3 : 0;\n    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"sources":["/home/truongduchuy910/apps/loaloa.me/app/utils/formatMoney.js"],"names":["formatMoney","amount","decimalCount","decimal","thousands","Math","abs","isNaN","negativeSign","i","Number","toFixed","toString","j","length","substr","replace","slice","e","console","log"],"mappings":";AAAA,eAAe,SAASA,WAAT,CAAqBC,MAArB,EAA+E;AAAA,MAAlDC,YAAkD,uEAAnC,CAAmC;AAAA,MAAhCC,OAAgC,uEAAtB,GAAsB;AAAA,MAAjBC,SAAiB,uEAAL,GAAK;;AAC5F,MAAI;AACFF,IAAAA,YAAY,GAAGG,IAAI,CAACC,GAAL,CAASJ,YAAT,CAAf;AACAA,IAAAA,YAAY,GAAGK,KAAK,CAACL,YAAD,CAAL,GAAsB,CAAtB,GAA0BA,YAAzC;AAEA,QAAMM,YAAY,GAAGP,MAAM,GAAG,CAAT,GAAa,GAAb,GAAmB,EAAxC;;AAEA,QAAIQ,CAAC,GAAG,UAASR,MAAM,GAAGI,IAAI,CAACC,GAAL,CAASI,MAAM,CAACT,MAAD,CAAN,IAAkB,CAA3B,EAA8BU,OAA9B,CAAsCT,YAAtC,CAAlB,EAAuEU,QAAvE,EAAR;;AACA,QAAIC,CAAC,GAAIJ,CAAC,CAACK,MAAF,GAAW,CAAZ,GAAiBL,CAAC,CAACK,MAAF,GAAW,CAA5B,GAAgC,CAAxC;AAEA,WAAON,YAAY,IAAIK,CAAC,GAAGJ,CAAC,CAACM,MAAF,CAAS,CAAT,EAAYF,CAAZ,IAAiBT,SAApB,GAAgC,EAArC,CAAZ,GAAuDK,CAAC,CAACM,MAAF,CAASF,CAAT,EAAYG,OAAZ,CAAoB,gBAApB,EAAsC,OAAOZ,SAA7C,CAAvD,IAAkHF,YAAY,GAAGC,OAAO,GAAGE,IAAI,CAACC,GAAL,CAASL,MAAM,GAAGQ,CAAlB,EAAqBE,OAArB,CAA6BT,YAA7B,EAA2Ce,KAA3C,CAAiD,CAAjD,CAAb,GAAmE,EAAjM,CAAP;AACD,GAVD,CAUE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF","sourcesContent":["export default function formatMoney(amount, decimalCount = 2, decimal = \".\", thousands = \",\") {\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n\n    const negativeSign = amount < 0 ? \"-\" : \"\";\n\n    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    let j = (i.length > 3) ? i.length % 3 : 0;\n\n    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}