{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Router from \"next/router\";\nimport nextCookie from \"next-cookies\";\nimport cookie from \"js-cookie\";\nimport { GraphQLClient } from \"graphql-request\";\nimport { Component } from \"react\";\nexport const login = ({\n  token,\n  id,\n  email,\n  isAdmin,\n  isSupporter,\n  isCustomer\n}) => {\n  cookie.set(\"id\", id);\n  cookie.set(\"email\", email);\n  cookie.set(\"isAdmin\", isAdmin);\n  cookie.set(\"isSupporter\", isSupporter);\n  cookie.set(\"isCustomer\", isCustomer);\n  cookie.set(\"token\", token);\n  Router.push(\"/\");\n};\nexport const signup = () => {\n  Router.push(\"/login\");\n};\nexport const auth = ctx => {\n  const {\n    token,\n    id,\n    isAdmin,\n    isSupporter,\n    isCustomer,\n    email\n  } = nextCookie(ctx);\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: \"/login\"\n    });\n    ctx.res.end();\n    return;\n  }\n\n  if (!token) {\n    Router.push(\"/login\");\n  }\n\n  return {\n    token,\n    id,\n    isAdmin,\n    isSupporter,\n    isCustomer,\n    email\n  };\n};\n\nconst getDisplayName = Component => Component.displayName || Component.name || \"Component\";\n\nexport const withAuthSync = WrappedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    static async getInitialProps(ctx) {\n      const {\n        token,\n        id,\n        isAdmin,\n        isSupporter,\n        isCustomer,\n        email\n      } = auth(ctx);\n      let a = \"\";\n      if (false) a = \"http://\";else a = \"https://\";\n\n      if (ctx.req) {\n        var uri = a + ctx.req.headers.host + \"/admin/api\";\n      } else {\n        var uri = window.location.origin + \"/admin/api\";\n      }\n\n      const client = new GraphQLClient(uri, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      ctx.client = client;\n      ctx.id = id;\n      ctx.isAdmin = isAdmin;\n      ctx.isSupporter = isSupporter;\n      ctx.isCustomer = isCustomer;\n      ctx.email = email;\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread({}, componentProps, {\n        client,\n        token,\n        id,\n        isAdmin,\n        isSupporter,\n        isCustomer,\n        email\n      });\n    }\n\n    render() {\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n};","map":null,"metadata":{},"sourceType":"module"}