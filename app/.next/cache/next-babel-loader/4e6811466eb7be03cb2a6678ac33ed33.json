{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withAuthSync } from \"../utils/auth\";\nimport cookie from \"js-cookie\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AllMessages from \"../components/messages/allMessages\";\nimport AllConversations from \"../components/conversations/allConversations\";\nimport CreateMessage from \"../components/messages/createMessage\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Router from \"next/router\";\nimport Link from \"../src/Link\";\nconst useStyles = makeStyles(theme => ({\n  box: {\n    border: 1,\n    background: \"rgba(225, 225, 225, 0.3)\",\n    borderRadius: 8,\n    padding: 21,\n    height: \"100%\"\n  },\n  paper: {\n    paddingBottom: 50\n  },\n  list: {\n    marginBottom: theme.spacing(2)\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper\n  },\n  appBar: {\n    top: \"auto\",\n    bottom: 0,\n    backgroundColor: \"white\",\n    boxShadow: \"none\"\n  },\n  toolbar: {\n    padding: 13,\n    boder: \"none\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  fabButton: {\n    position: \"absolute\",\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: \"0 auto\"\n  }\n}));\nconst query = {\n  allAdmins: `query {\n    allAdmins: allUsers(where: { isAdmin: true }) {\n      id\n    }\n  }`,\n  allConversations: `query($user: UserWhereInput) {\n    allConversations(where: { members_some: $user }) {\n      id\n    }\n  }`,\n  allMessages: `query($conversation: ConversationWhereInput) {\n    allMessages(orderBy: \"time_ASC\", where: { conversation: $conversation }) {\n      seller {\n        isCustomer\n        isSupporter\n        isAdmin\n        email\n        id\n      }\n      id\n      text\n      time\n    }\n  }`,\n  createConversation: `mutation($members: [UserWhereUniqueInput]) {\n    createConversation(data: { members: { connect: $members } }) {\n      id\n    }\n  }`\n};\n\nfunction customerChat({\n  allConversations,\n  allMessages,\n  user\n}) {\n  const classes = useStyles();\n  let {\n    0: conversation,\n    1: setConversation\n  } = useState();\n  return __jsx(CardMedia, {\n    image: \"/img/tuvilogic_bg.jpg\"\n  }, __jsx(Container, {\n    maxWidth: \"lg\",\n    style: {\n      padding: 13,\n      minHeight: \"100vh\"\n    }\n  }, __jsx(Link, {\n    href: \"/\"\n  }, \"Quay l\\u1EA1i\"), __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    xl: 12,\n    sm: 12,\n    md: 4,\n    lg: 6\n  }, __jsx(Paper, {\n    className: classes.box\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.scroll\n  }, __jsx(AllMessages, {\n    conversation: conversation,\n    role: \"isAdmin\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(CreateMessage, {\n    conversation: conversation\n  }))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    xl: 6,\n    sm: 6,\n    md: 4,\n    lg: 3\n  }, __jsx(Paper, {\n    className: classes.box\n  }, __jsx(AllConversations, {\n    user: user,\n    onClick: conversation => {\n      setConversation(conversation);\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    xl: 6,\n    sm: 6,\n    md: 4,\n    lg: 3\n  }, __jsx(Paper, {\n    className: classes.box\n  }, __jsx(AllConversations, {\n    user: user\n  }))))));\n}\n\ncustomerChat.getInitialProps = async ({\n  res,\n  client,\n  id,\n  email,\n  isAdmin,\n  isSupporter,\n  isCustomer\n}) => {\n  try {\n    const data = await client.request(query.allConversations, {\n      user: {\n        id: id\n      }\n    });\n    let {\n      allConversations\n    } = data;\n\n    if (allConversations.length) {\n      var {\n        allMessages\n      } = await client.request(query.allMessages, {\n        conversation: {\n          id: allConversations[0].id\n        }\n      });\n    } else {\n      var {\n        allAdmins: members\n      } = await client.request(query.allAdmins);\n      members.push({\n        id: id\n      });\n      let {\n        createConversation\n      } = await client.request(query.createConversation, {\n        members\n      });\n      allConversations.push(createConversation);\n    }\n\n    return {\n      allConversations,\n      allMessages,\n      user: {\n        id: id\n      }\n    };\n  } catch (error) {\n    console.log(error);\n    cookie.remove(\"token\");\n    client.request(`mutation {\n      unauthenticateUser {\n        success\n      }\n    }`);\n\n    if (res) {\n      res.writeHead(302, {\n        Location: \"/login\"\n      });\n      res.end();\n    }\n  }\n};\n\nexport default withAuthSync(customerChat);","map":null,"metadata":{},"sourceType":"module"}