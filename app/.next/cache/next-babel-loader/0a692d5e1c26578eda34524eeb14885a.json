{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Layout from \"../src/Layout\";\nimport LightBoard from \"../src/LightBoard\";\nimport request from \"../components/config/request\";\nimport { login } from \"../utils/auth\";\nimport Link from \"../src/Link\";\nimport Logo from \"../src/logo\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction Login() {\n  var _useState = useState(false),\n      username = _useState[0],\n      setUserName = _useState[1];\n\n  var _useState2 = useState(false),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(\"Đăng nhập\"),\n      buttonStatus = _useState3[0],\n      setButtonStatus = _useState3[1];\n\n  function loginButtonClick() {\n    var response, authenticateUserWithPassword, token, _authenticateUserWith, id, email, isAdmin, isSupporter, isCustomer;\n\n    return _regeneratorRuntime.async(function loginButtonClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setButtonStatus(\"Vui lòng đợi...\");\n\n            if (!(username.length > 5 && password.length > 5)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(request({\n              body: {\n                query: \"mutation($username: String, $password: String) {\\n      authenticateUserWithPassword(email: $username, password: $password) {\\n      token\\n      item {\\n          id\\n          email\\n          isAdmin\\n          isSupporter\\n          isCustomer\\n      }\\n      }}\",\n                variables: {\n                  username: username,\n                  password: password\n                }\n              }\n            }));\n\n          case 4:\n            response = _context.sent;\n            authenticateUserWithPassword = response.data.authenticateUserWithPassword;\n\n            if (authenticateUserWithPassword) {\n              token = authenticateUserWithPassword.token, _authenticateUserWith = authenticateUserWithPassword.item, id = _authenticateUserWith.id, email = _authenticateUserWith.email, isAdmin = _authenticateUserWith.isAdmin, isSupporter = _authenticateUserWith.isSupporter, isCustomer = _authenticateUserWith.isCustomer;\n              setButtonStatus(\"Đăng nhập thành công!\");\n              login({\n                token: token,\n                id: id,\n                email: email,\n                isAdmin: isAdmin,\n                isSupporter: isSupporter,\n                isCustomer: isCustomer\n              });\n            } else {\n              setButtonStatus(\"Tài khoản không tồn tại.\");\n            }\n\n            _context.next = 10;\n            break;\n\n          case 9:\n            setButtonStatus(\"Kiểm tra và thử lại\");\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  return __jsx(Layout, null, __jsx(Container, {\n    maxWidth: \"sm\",\n    style: {\n      padding: 8\n    }\n  }, __jsx(LightBoard, null, __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    justify: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 10\n  }, __jsx(Logo, null)), __jsx(Grid, {\n    item: true\n  }, __jsx(Typography, {\n    variant: \"body1\",\n    style: {\n      marginBottom: 34\n    }\n  }, \"\\u0110\\u0102NG K\\xDD T\\xC0I KHO\\u1EA2N \\u0110\\u1EC2 KH\\xC1M PH\\xC1 TH\\u1EBE GI\\u1EDAI HUY\\u1EC0N B\\xCD\")), __jsx(\"form\", {\n    noValidate: true,\n    autoComplete: \"on\"\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"username\",\n    label: \"T\\xEAn \\u0111\\u0103ng nh\\u1EADp\",\n    onChange: function onChange(e) {\n      setUserName(e.target.value);\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    fullWidth: true,\n    variant: \"outlined\",\n    id: \"password\",\n    label: \"M\\u1EADt kh\\u1EA9u\",\n    type: \"password\",\n    onChange: function onChange(e) {\n      setPassword(e.target.value);\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Button, {\n    style: {\n      backgroundColor: \"#76552a\",\n      color: \"#dab857\",\n      marginTop: 21,\n      marginBottom: 21\n    },\n    fullWidth: true // variant=\"outlined\"\n    ,\n    onClick: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(loginButtonClick());\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, buttonStatus)), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Link, {\n    href: \"/signup\"\n  }, \"\\u0110\\u0103ng k\\xFD\"))))))));\n}\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}