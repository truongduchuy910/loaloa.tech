{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useRef } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Pager from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport request from \"../config/request\";\nimport Card from \"@material-ui/core/Card\";\nvar query = {\n  allMessages: \"query($conversation: ConversationWhereInput) {\\n    allMessages(\\n      orderBy: \\\"time_ASC\\\", \\n      where: { conversation: $conversation },\\n      first: 100) {\\n      seller {\\n        isCustomer\\n        isSupporter\\n        isAdmin\\n        email\\n        id\\n      }\\n      id\\n      text\\n      time\\n    }\\n  }\"\n};\nexport default function allMessages(_ref) {\n  var conversation = _ref.conversation,\n      role = _ref.role;\n\n  var _useState = useState([]),\n      messages = _useState[0],\n      setMessage = _useState[1];\n\n  var divRef = useRef(null);\n  var counter;\n  useEffect(function () {\n    counter = setInterval(function _callee() {\n      var _ref2, _allMessages;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!conversation) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(request({\n                body: {\n                  query: query.allMessages,\n                  variables: {\n                    conversation: conversation\n                  }\n                }\n              }));\n\n            case 3:\n              _ref2 = _context.sent;\n              _allMessages = _ref2.data.allMessages;\n              // divRef.current.scrollIntoView({ behavior: \"smooth\" });\n              setMessage(_allMessages);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }, 1000);\n    return function () {\n      clearInterval(counter);\n    };\n  });\n\n  if (messages.length) {\n    return __jsx(Box, {\n      style: {\n        overflowY: \"scroll\",\n        padding: 8,\n        maxHeight: \"85vh\"\n      }\n    }, messages.map(function (message) {\n      return __jsx(Grid, {\n        key: message.id,\n        container: true,\n        spacing: 1,\n        justify: message.seller[role] ? \"flex-end\" : \"flex-start\"\n      }, __jsx(Grid, {\n        item: true\n      }, __jsx(Pager, {\n        style: {\n          padding: 5,\n          borderRadius: 8\n        }\n      }, __jsx(Typography, null, message.text))));\n    }), __jsx(\"div\", {\n      ref: divRef\n    }));\n  } else return __jsx(\"div\", {\n    ref: divRef\n  }, \"\\u0110ang t\\u1EA3i...\");\n}","map":null,"metadata":{},"sourceType":"module"}