{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport Pager from \"@material-ui/core/Paper\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport request from \"../config/request\";\nvar query = {\n  allConversations: \"query($user: UserWhereInput) {\\n        allConversations(where: { members_some: $user }) {\\n          id\\n          members (where: { isSupporter: null, AND: { isAdmin: null } }) {\\n              id\\n              email\\n          }\\n        }\\n      }\"\n};\nexport default function allConversations(_ref) {\n  var user = _ref.user,\n      _onClick = _ref.onClick;\n\n  var _useState = useState([]),\n      conversations = _useState[0],\n      setConversations = _useState[1];\n\n  var counter;\n  useEffect(function () {\n    counter = setInterval(function _callee() {\n      var _ref2, allConversations;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(request({\n                body: {\n                  query: query.allConversations,\n                  variables: {\n                    user: user\n                  }\n                }\n              }));\n\n            case 2:\n              _ref2 = _context.sent;\n              allConversations = _ref2.data.allConversations;\n              setConversations(allConversations);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }, 2020);\n    return function () {\n      clearInterval(counter);\n    };\n  });\n\n  if (conversations.length) {\n    return __jsx(List, null, conversations.map(function (conversation) {\n      return __jsx(ListItem, {\n        button: true,\n        key: conversation.id,\n        onClick: function onClick() {\n          return _onClick({\n            id: conversation.id\n          });\n        }\n      }, __jsx(ListItemText, {\n        primary: conversation.members.map(function (conversation) {\n          return conversation.email;\n        }).toString()\n      }));\n    }));\n  } else return __jsx(\"div\", null, \"...\");\n}","map":null,"metadata":{},"sourceType":"module"}