{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { withAuthSync } from \"../utils/auth\";\nimport cookie from \"js-cookie\";\nimport Layout from \"../src/Layout\";\nimport Pager from \"@material-ui/core/Paper\";\nimport AllMessages from \"../components/messages/allMessages\";\nimport CreateMessage from \"../components/messages/createMessage\";\nimport request from \"graphql-request\";\nimport Link from \"../src/Link\";\nconst useStyles = makeStyles(theme => ({\n  text: {\n    padding: theme.spacing(2, 2, 0)\n  },\n  paper: {\n    paddingBottom: 50\n  },\n  list: {\n    marginBottom: theme.spacing(2)\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper\n  },\n  appBar: {\n    top: \"auto\",\n    bottom: 0,\n    backgroundColor: \"white\",\n    boxShadow: \"none\"\n  },\n  toolbar: {\n    padding: 13,\n    boder: \"none\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  fabButton: {\n    position: \"absolute\",\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: \"0 auto\"\n  }\n}));\nconst query = {\n  allAdmins: `query {\n    allAdmins: allUsers(where: { isAdmin: true }) {\n      id\n    }\n  }`,\n  allConversations: `query($user: UserWhereInput) {\n    allConversations(where: { members_some: $user }) {\n      id\n    }\n  }`,\n  allMessages: `query($conversation: ConversationWhereInput) {\n    allMessages(orderBy: \"time_ASC\", where: { conversation: $conversation }) {\n      seller {\n        isCustomer\n        isSupporter\n        isAdmin\n        email\n        id\n      }\n      id\n      text\n      time\n    }\n  }`,\n  createConversation: `mutation($members: [UserWhereUniqueInput]) {\n    createConversation(data: { members: { connect: $members } }) {\n      id\n    }\n  }`\n};\nimport Router from \"next/router\";\n\nfunction customerChat({\n  allConversations,\n  allMessages,\n  isAdmin,\n  isSupporter\n}) {\n  const classes = useStyles();\n\n  if (isAdmin == \"true\") {\n    Router.push(\"/adminChat\");\n  }\n\n  return __jsx(Layout, null, __jsx(Link, {\n    href: \"/\"\n  }, \"Quay l\\u1EA1i\"), __jsx(React.Fragment, null, __jsx(CssBaseline, null), __jsx(AllMessages, {\n    allMessages: allMessages,\n    conversation: allConversations[0],\n    role: \"isCustomer\"\n  }), __jsx(AppBar, {\n    position: \"fixed\",\n    className: classes.appBar\n  }, __jsx(Toolbar, {\n    className: classes.toolbar\n  }, __jsx(CreateMessage, {\n    conversation: allConversations[0]\n  }), \"}\"))));\n}\n\ncustomerChat.getInitialProps = async ({\n  res,\n  client,\n  id,\n  email,\n  isAdmin,\n  isSupporter,\n  isCustomer\n}) => {\n  try {\n    const data = await client.request(query.allConversations, {\n      user: {\n        id: id\n      }\n    });\n    let {\n      allConversations\n    } = data;\n\n    if (allConversations.length) {\n      var {\n        allMessages\n      } = await client.request(query.allMessages, {\n        conversation: {\n          id: allConversations[0].id\n        }\n      });\n    } else {\n      var {\n        allAdmins: members\n      } = await client.request(query.allAdmins);\n      members.push({\n        id: id\n      });\n      let {\n        createConversation\n      } = await client.request(query.createConversation, {\n        members\n      });\n      allConversations.push(createConversation);\n    }\n\n    return {\n      allConversations,\n      allMessages,\n      isAdmin,\n      isSupporter\n    };\n  } catch (error) {\n    console.log(error);\n    cookie.remove(\"token\");\n    client.request(`mutation {\n      unauthenticateUser {\n        success\n      }\n    }`);\n\n    if (res) {\n      res.writeHead(302, {\n        Location: \"/login\"\n      });\n      res.end();\n    }\n  }\n};\n\nexport default withAuthSync(customerChat);","map":null,"metadata":{},"sourceType":"module"}