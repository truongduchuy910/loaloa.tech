{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { withAuthSync } from \"../utils/auth\";\nimport cookie from \"js-cookie\";\nimport Layout from \"../src/Layout\";\nimport AllMessages from \"../components/messages/allMessages\";\nimport CreateMessage from \"../components/messages/createMessage\";\nconst query = {\n  allConversations: `query($user: UserWhereInput) {\n        allConversations(where: { members_some: $user }) {\n            id\n        }\n    }`,\n  allMessages: `query($conversation: ConversationWhereInput) {\n        allMessages(orderBy: \"time_ASC\", where: { conversation: $conversation }) {\n                seller {\n                isCustomer\n                isSupporter\n                isAdmin\n                email\n                id\n            }\n            id\n            text\n            time\n        }\n    }`\n};\nconst useStyles = makeStyles(theme => ({\n  text: {\n    padding: theme.spacing(2, 2, 0)\n  },\n  paper: {\n    paddingBottom: 50\n  },\n  list: {\n    marginBottom: theme.spacing(2)\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper\n  },\n  appBar: {\n    top: \"auto\",\n    bottom: 0,\n    backgroundColor: \"white\",\n    boxShadow: \"none\"\n  },\n  toolbar: {\n    padding: 13,\n    boder: \"none\"\n  },\n  grow: {\n    flexGrow: 1\n  },\n  fabButton: {\n    position: \"absolute\",\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: \"0 auto\"\n  }\n}));\n\nconst supporterChat = ({\n  allConversations,\n  allMessages\n}) => {\n  const classes = useStyles();\n  return __jsx(Layout, null, __jsx(Fragment, null, __jsx(CssBaseline, null), __jsx(AllMessages, {\n    allMessages: allMessages,\n    conversation: allConversations[0]\n  }), __jsx(AppBar, {\n    position: \"fixed\",\n    className: classes.appBar\n  }, __jsx(Toolbar, {\n    className: classes.toolbar\n  }, __jsx(CreateMessage, {\n    conversation: allConversations[0]\n  })))));\n};\n\nsupporterChat.getInitialProps = async ({\n  res,\n  client,\n  id\n}) => {\n  try {\n    const conversationsQueryResult = await client.request(query.allConversations, {\n      user: {\n        id\n      }\n    });\n    console.log(\"conversationsQueryResult\", conversationsQueryResult);\n    const {\n      allConversations\n    } = conversationsQueryResult;\n    let allMessages = [];\n\n    if (allConversations.length) {\n      const messageQueryResult = await client.request(query.allMessages, {\n        conversation: {\n          id: allConversations[0].id\n        }\n      });\n      allMessages = messageQueryResult.allMessages;\n    }\n\n    return {\n      allConversations,\n      allMessages\n    };\n  } catch (error) {\n    console.error(error);\n    cookie.remove(\"token\");\n    client.request(`mutation {\n            unauthenticateUser {\n                success\n            }\n        }`); // if (res) {\n    //     res.writeHead(302, { Location: \"/login\" });\n    //     res.end();\n    // }\n  }\n};\n\nexport default withAuthSync(supporterChat);","map":null,"metadata":{},"sourceType":"module"}